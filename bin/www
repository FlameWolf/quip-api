"use strict";

/**
 ** Module dependencies.
 **/

const fs = require("fs");
const app = require("../app");
const http = require("http");

/**
 ** Get port from environment and store in Express.
 **/

const port = normalizePort(process.env.PORT || "4096");
app.set("port", port);

/**
 ** Create HTTP server.
 **/

const server = http.createServer(app);

/**
 ** Listen on provided port, on all network interfaces.
 **/

server.on("error", onError);
server.on("listening", onListening);
if (process.env.NODE_ENV !== "production") {
	require("express-oas-generator").handleRequests();
}
server.listen(port);

/**
 ** Normalize a port into a number, string, or false.
 **/

function normalizePort(val) {
	const port = parseInt(val, 10);
	return isNaN(port) // named pipe
		? val
		: port >= 0 // port number
		? port
		: false;
}

/**
 ** Event listener for HTTP server "error" event.
 **/

function onError(err) {
	if (err.syscall !== "listen") {
		throw err;
	}
	const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;
	// handle specific listen errors with friendly messages
	switch (err.code) {
		case "EACCES":
			console.error(`${bind} requires elevated privileges`);
			process.exit(1);
			break;
		case "EADDRINUSE":
			console.error(`${bind} is already in use`);
			process.exit(1);
			break;
		default:
			throw err;
	}
}

/**
 ** Event listener for HTTP server "listening" event.
 **/

function onListening() {
	const addr = server.address();
	const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
	console.log(`Listening on ${bind}`);
}